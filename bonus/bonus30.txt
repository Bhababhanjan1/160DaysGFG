Group Shifted String
Difficulty: MediumAccuracy: 68.56%Submissions: 761+Points: 4
Given an array of strings (all lowercase letters), the task is to group them in such a way that all strings in a group are shifted versions of each other.

Two strings s1 and s2 are called shifted if the following conditions are satisfied:

s1.length = s2.length
s1[i] = s2[i] + m for 1 <= i <= s1.length  for a constant integer m
Examples :

Input: arr = ["acd", "dfg", "wyz", "yab", "mop", "bdfh", "a", "x", "moqs"]
Output: [["acd", "dfg", "wyz", "yab", "mop"], ["bdfh", "moqs"], ["a", "x"]] 
Explanation: All shifted strings are grouped together.
Input: arr = ["geek", "for", "geeks"]
Output: [["for"], ["geek"], ["geeks"]]
Input: arr = ["aaa", "adb", "bbd", "dbc", "bca"]
Output: [["aaa"], ["adb"], ["bbd"], ["bca"], ["dbc"]]
Constraints:
1 ≤ arr.size() ≤ 105
1 ≤ arr[i].size() ≤ 5.

// Solution:

class Solution {
    public ArrayList<ArrayList<String>> groupShiftedString(String[] arr) {
        // code here
        Map<String, ArrayList<String>> groups = new HashMap<>();
        for(String str : arr) {
            String key = getShiftKey(str);
            groups.computeIfAbsent(key, k -> new ArrayList<>()).add(str);
        }
        return new ArrayList<>(groups.values());
    }
    private String getShiftKey(String str) {
        StringBuilder key = new StringBuilder();
        for (int i = 1; i < str.length(); i++) {
            int diff = str.charAt(i) - str.charAt(i - 1);
            if (diff < 0) {
                diff += 26;
            }
            key.append(diff).append(",");
        }
        return key.toString();
    }
}