Minimum repeat to make substring
Difficulty: MediumAccuracy: 51.22%Submissions: 65K+Points: 4
Given two strings s1 and s2. Return a minimum number of times s1 has to be repeated such that s2 is a substring of it. If s2 can never be a substring then return -1.

Note: Both the strings contain only lowercase letters.

Examples:

Input: s1 = "ww", s2 = "www"
Output: 2
Explanation: Repeating s1 two times "wwww", s2 is a substring of it.
Input: s1 = "abcd", s2 = "cdabcdab" 
Output: 3 
Explanation: Repeating s1 three times "abcdabcdabcd", s2 is a substring of it. s2 is not a substring of s1 when it is repeated less than 3 times.
Input: s1 = "ab", s2 = "cab"
Output: -1
Explanation: No matter how many times we repeat s1, we can't get a string such that s2 is a substring of it.
Constraints:
1 ≤ s1.size(), s2.size() ≤ 105





class Solution {

    static void computeLPSArray(String s, int[] lps) {
        int len = 0, idx = 1;

        lps[0] = 0;

        while (idx < s.length()) {
            if (s.charAt(idx) == s.charAt(len)) {
                len++;
                lps[idx] = len;
                idx++;
            } else {

                if (len == 0) {
                    lps[idx] = 0;
                    idx++;
                } else {

                    len = lps[len - 1];
                }
            }
        }
    }

    static boolean KMPSearch(String txt, String pat, int[] lps, int rep) {
        int n = txt.length(), m = pat.length();
        int i = 0, j = 0;

        while (i < n * rep) {

            if (txt.charAt(i % n) == pat.charAt(j)) {
                i++;
                j++;

                if (j == m) {
                    return true;
                }
            } else {

                if (j != 0)
                    j = lps[j - 1];
                else
                    i++;
            }
        }
        return false;
    }

    static int minRepeats(String s1, String s2) {

        int n = s1.length();
        int m = s2.length();

        int[] lps = new int[m];
        computeLPSArray(s2, lps);

        int x = (m + n - 1) / n;

        if (KMPSearch(s1, s2, lps, x)) return x;

        if (KMPSearch(s1, s2, lps, x + 1)) return x + 1;

        return -1;
    }
};