Median of 2 Sorted Arrays of Different Sizes
Difficulty: HardAccuracy: 28.4%Submissions: 125K+Points: 8
Given two sorted arrays a[] and b[], find and return the median of the combined array after merging them into a single sorted array.

Examples:

Input: a[] = [-5, 3, 6, 12, 15], b[] = [-12, -10, -6, -3, 4, 10]
Output: 3
Explanation: The merged array is [-12, -10, -6, -5, -3, 3, 4, 6, 10, 12, 15]. So the median of the merged array is 3.
Input: a[] = [2, 3, 5, 8], b[] = [10, 12, 14, 16, 18, 20]
Output: 11
Explanation: The merged array is [2, 3, 5, 8, 10, 12, 14, 16, 18, 20]. So the median of the merged array is (10 + 12) / 2 = 11.
Input: a[] = [], b[] = [2, 4, 5, 6]
Output: 4.5
Explanation: The merged array is [2, 4, 5, 6]. So the median of the merged array is (4 + 5) / 2 = 4.5.
Constraints: 
0 ≤ a.size(), b.size() ≤ 106
1 ≤ a[i], b[i] ≤ 109
a.size() + b.size() > 0. 


// Solution:-

class Solution {
    public double medianOf2(int a[], int b[]) {
        // Ensure the first array is smaller or equal in size to the second array
        if (a.length > b.length) {
            return medianOf2(b, a);
        }

        int x = a.length;
        int y = b.length;
        int low = 0, high = x;

        while (low <= high) {
            int partitionX = (low + high) / 2;
            int partitionY = (x + y + 1) / 2 - partitionX;

            int maxX = (partitionX == 0) ? Integer.MIN_VALUE : a[partitionX - 1];
            int minX = (partitionX == x) ? Integer.MAX_VALUE : a[partitionX];

            int maxY = (partitionY == 0) ? Integer.MIN_VALUE : b[partitionY - 1];
            int minY = (partitionY == y) ? Integer.MAX_VALUE : b[partitionY];

            if (maxX <= minY && maxY <= minX) {
                // Found the correct partition
                if ((x + y) % 2 == 0) {
                    return ((double)Math.max(maxX, maxY) + Math.min(minX, minY)) / 2;
                } else {
                    return (double)Math.max(maxX, maxY);
                }
            } else if (maxX > minY) {
                // Move left in array a
                high = partitionX - 1;
            } else {
                // Move right in array a
                low = partitionX + 1;
            }
        }

        throw new IllegalArgumentException("Input arrays are not sorted");
    }
}
