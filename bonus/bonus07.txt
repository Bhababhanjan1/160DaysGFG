Palindrome Sentence
Difficulty: EasyAccuracy: 50.04%Submissions: 17K+Points: 2
Given a single string s, the task is to check if it is a palindrome sentence or not. A palindrome sentence is a sequence of characters, such as word, phrase, or series of symbols that reads the same backward as forward after converting all uppercase letters to lowercase and removing all non-alphanumeric characters.

Examples:

Input: s = "Too hot to hoot"
Output: true
Explanation: If we remove all non-alphanumeric characters and convert all uppercase letters to lowercase, string s will become “toohottohoot” which is a palindrome.
Input: s = "Abc 012..## 10cbA"
Output: true
Explanation: If we remove all non-alphanumeric characters and convert all uppercase letters to lowercase, string s will become “abc01210cba” which is a palindrome.
Input: s = "ABC $. def01ASDF"
Output: false
Explanation: The processed string becomes "abcdef01asdf", which is not a palindrome.
Constraints:
1<= s.size() <= 106



class Solution {

    public boolean sentencePalindrome(String s) {
        // Step 1: Process the string to remove non-alphanumeric characters and convert to lowercase
        StringBuilder processedString = new StringBuilder();
        
        // Traverse the input string
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            // If the character is alphanumeric, add it to the processed string in lowercase
            if (Character.isLetterOrDigit(c)) {
                processedString.append(Character.toLowerCase(c));
            }
        }

        // Step 2: Check if the processed string is a palindrome
        int left = 0;
        int right = processedString.length() - 1;
        
        while (left < right) {
            if (processedString.charAt(left) != processedString.charAt(right)) {
                return false; // Return false if characters don't match
            }
            left++;
            right--;
        }

        return true; // Return true if it's a palindrome
    }
}