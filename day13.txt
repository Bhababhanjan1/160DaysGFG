Smallest Positive Missing Number
Difficulty: MediumAccuracy: 25.13%Submissions: 350K+Points: 4
You are given an integer array arr[]. Your task is to find the smallest positive number missing from the array.

Note: Positive number starts from 1. The array can have negative integers too.

Examples:

Input: arr[] = [2, -3, 4, 1, 1, 7]
Output: 3
Explanation: Smallest positive missing number is 3.
Input: arr[] = [5, 3, 2, 5, 1]
Output: 4
Explanation: Smallest positive missing number is 4.
Input: arr[] = [-8, 0, -1, -4, -3]
Output: 1
Explanation: Smallest positive missing number is 1.
Constraints:  
1 <= arr.size() <= 105
-106 <= arr[i] <= 106




class Solution {
    // Function to find the smallest positive number missing from the array.
    public int missingNumber(int[] arr) {
        int n = arr.length;

        // Step 1: Segregate positive and non-positive numbers
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] <= 0) {
                // Swap non-positive number to the front
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                j++;
            }
        }

        // Step 2: Work only on the positive part of the array
        int[] positiveArr = arr; // Alias for clarity
        int size = n - j; // Size of the positive subarray
        for (int i = j; i < n; i++) {
            int val = Math.abs(positiveArr[i]);
            if (val - 1 < size && positiveArr[j + val - 1] > 0) {
                // Mark as visited by making the value negative
                positiveArr[j + val - 1] = -positiveArr[j + val - 1];
            }
        }

        // Step 3: Find the first positive index in the positive subarray
        for (int i = j; i < n; i++) {
            if (positiveArr[i] > 0) {
                return i - j + 1;
            }
        }

        // If all indices are marked, return size + 1
        return size + 1;
    }
}
