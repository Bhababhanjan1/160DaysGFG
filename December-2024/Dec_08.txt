Overlapping Intervals
Difficulty: MediumAccuracy: 57.41%Submissions: 77K+Points: 4
Given an array of Intervals arr[][], where arr[i] = [starti, endi]. The task is to merge all of the overlapping Intervals.

Examples:

Input: arr[][] = [[1,3],[2,4],[6,8],[9,10]]
Output: [[1,4], [6,8], [9,10]]
Explanation: In the given intervals we have only two overlapping intervals here, [1,3] and [2,4] which on merging will become [1,4]. Therefore we will return [[1,4], [6,8], [9,10]].
Input: arr[][] = [[6,8],[1,9],[2,4],[4,7]]
Output: [[1,9]]
Explanation: In the given intervals all the intervals overlap with the interval [1,9]. Therefore we will return [1,9].
Constraints:
1 ≤ arr.size() ≤ 105
0 ≤ starti ≤ endi ≤ 105



class Solution {
    public List<int[]> mergeOverlap(int[][] arr) {
        // Edge case: if the input is empty, return an empty list
        if (arr.length == 0) {
            return new ArrayList<>();
        }
        
        // Step 1: Sort intervals based on the start of each interval
        Arrays.sort(arr, (a, b) -> a[0] - b[0]);
        
        // List to hold the merged intervals
        List<int[]> result = new ArrayList<>();
        
        // Step 2: Initialize the first interval
        int[] currentInterval = arr[0];
        
        // Step 3: Iterate over the intervals
        for (int i = 1; i < arr.length; i++) {
            // If the current interval overlaps with the next interval
            if (arr[i][0] <= currentInterval[1]) {
                // Merge them by extending the end time of the current interval
                currentInterval[1] = Math.max(currentInterval[1], arr[i][1]);
            } else {
                // No overlap, so add the current interval to the result list
                result.add(currentInterval);
                // Move to the next interval
                currentInterval = arr[i];
            }
        }
        
        // Add the last merged interval to the result
        result.add(currentInterval);
        
        return result;
    }
}