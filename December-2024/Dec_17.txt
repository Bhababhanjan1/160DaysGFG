Aggressive Cows
Difficulty: MediumAccuracy: 59.57%Submissions: 81K+Points: 4
You are given an array with unique elements of stalls[], which denote the position of a stall. You are also given an integer k which denotes the number of aggressive cows. Your task is to assign stalls to k cows such that the minimum distance between any two of them is the maximum possible.

Examples :

Input: stalls[] = [1, 2, 4, 8, 9], k = 3
Output: 3
Explanation: The first cow can be placed at stalls[0], 
the second cow can be placed at stalls[2] and 
the third cow can be placed at stalls[3]. 
The minimum distance between cows, in this case, is 3, which also is the largest among all possible ways.
Input: stalls[] = [10, 1, 2, 7, 5], k = 3
Output: 4
Explanation: The first cow can be placed at stalls[0],
the second cow can be placed at stalls[1] and
the third cow can be placed at stalls[4].
The minimum distance between cows, in this case, is 4, which also is the largest among all possible ways.
Input: stalls[] = [2, 12, 11, 3, 26, 7], k = 5
Output: 1
Explanation: Each cow can be placed in any of the stalls, as the no. of stalls are exactly equal to the number of cows.
The minimum distance between cows, in this case, is 1, which also is the largest among all possible ways.
Constraints:
2 <= stalls.size() <= 106
0 <= stalls[i] <= 108
1 <= k <= stalls.size()













class Solution {
    public static int aggressiveCows(int[] stalls, int k) {
        // Step 1: Sort the stalls array
        Arrays.sort(stalls);
        
        // Step 2: Define binary search range
        int low = 1; // Minimum possible distance
        int high = stalls[stalls.length - 1] - stalls[0]; // Maximum possible distance
        int result = 0;
        
        // Step 3: Binary search to find the maximum minimum distance
        while (low <= high) {
            int mid = (low + high) / 2; // Candidate distance
            
            if (canPlaceCows(stalls, k, mid)) {
                result = mid;  // Update result as this distance works
                low = mid + 1; // Try for a larger minimum distance
            } else {
                high = mid - 1; // Reduce the search space
            }
        }
        return result;
    }
    
    // Helper method to check if cows can be placed with at least 'minDist' distance
    private static boolean canPlaceCows(int[] stalls, int k, int minDist) {
        int cowsPlaced = 1; // Place the first cow in the first stall
        int lastPosition = stalls[0];
        
        for (int i = 1; i < stalls.length; i++) {
            if (stalls[i] - lastPosition >= minDist) {
                cowsPlaced++; // Place another cow
                lastPosition = stalls[i]; // Update the last position
            }
            if (cowsPlaced >= k) {
                return true; // Successfully placed all cows
            }
        }
        return false; // Could not place all cows with the given distance
    }
}